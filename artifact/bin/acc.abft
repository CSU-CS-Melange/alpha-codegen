#!/bin/bash

# acc - (A)lpha to (C) (C)ompiler
#
# This script wraps the Alpha codegen functionality and gcc. Given a simple input Alpha
# program, it produces ABFT hardened versions of the input program.
# 

BASE_DIR=`dirname $0`
BASE_NAME=`basename $0`

# exit if any intermediate steps fail
#set -e

function usage {
  echo "usage:" 
  echo "  acc [-o out_dir] [-d data_type] [-v] [-m] ALPHA_FILE TS1 TS2[ TS3[ TS4]]"
  echo "options:"
  echo "    -o,  --out-dir   : Directory in which to place the output files, if the"
  echo "                       path does not exist then it will be created (default: .)"
  echo "    -d,  --data-type : Data type to use for program variables, may be 'int',"
  echo "                       'long', 'float', or 'double' (default: 'float')"
  echo "    -m,  --make      : Compile the generated code with default make command"
  echo "    -v,  --verbose   : Emit debug information during simplification exploration"
  echo 
  echo "arguments:"
  echo "    ALPHA_FILE       : Input Alpha file used to generate main ystem, makefile,"
  echo "                       wrapper, and verification files. (required if neither "
  echo "                       -v1 nor -v2 is specified)"
  echo "    TSx              : ABFT patch size dimension, there must be as many specified"
  echo "                       as there are dimensions in the output variable."
  echo ""
}

function assert_is_file_if_non_null {
  filepath=$1
  if [[ -n "$filepath" && ! -f "$filepath" ]]; then
    echo "[$BASE_NAME]: error '$filepath' does not appear to be a regular file, exiting"
    exit 1
  fi
}

function assert_file_created {
  file_name=$1
  if [[ ! -f $file_name ]]; then
    echo "[$BASE_NAME]: error, failed to create the file '$file_name', exiting"
    exit 1
  fi
  echo "[$BASE_NAME]: created '$file_name' file" 
}

function assert_dependency_exists {
  dep=$1
  if [[ -z "$(which $dep)" ]]; then
    echo "[$BASE_NAME]: error, the utility '$dep' is required but cannot be found in the PATH, exiting"
    exit 1
  fi
}

function assert_dependencies_exist {
  assert_dependency_exists java
  assert_dependency_exists make
  assert_dependency_exists gcc
}


#######################################################################
# arg parsing and preprocessing
#######################################################################

out_dir='.'
data_type='float'

params=""
while (( "$#" )); do
  case "$1" in
    -h|--help)
      usage;
      exit 0;
      ;;
    -v|--verbose)
      verbose=1;
      shift 1
      ;;
    -m|--make)
      MAKE=1;
      shift 1
      ;;
    -o|--out-dir)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        out_dir=$2
        shift 2
      else
        echo "argument missing for -- $1" >&2
        exit 1
      fi
      ;;
    -d|--data-type)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        data_type=$2
        if [[ "$data_type" != 'int' && "$data_type" != 'long' && "$data_type" != 'float' && "$data_type" != 'double' ]]; then
          echo "'$data_type' is not a recognized data type"
          usage
          exit 1
        fi
        shift 2
      else
        echo "argument missing for -- $1" >&2
        exit 1
      fi
      ;;
    -*|--*=) # unsupported flags
      echo "unrecognized option -- $(echo $1 | sed 's~^-*~~')" >&2
      usage;
      exit 1
      ;;
    *) # preserve positional arguments
      params="$params $1"
      shift
      ;;
  esac
done

eval set -- "$params";

# assert that an input alpha file was specified
if [[ ! -f "$1" ]]; then
  echo "No input alpha file was specified"
  usage
  exit 1
fi

if [[ -z "$1" || -z "$2" || -z "$3" ]]; then
  usage
  exit 1
fi

# check and exit if dependencies are not available
assert_dependencies_exist

# make out directory if it doesn't already exist
mkdir -p $out_dir

#######################################################################
# codegen - system C file
#######################################################################

# using v2 alpha, create the v1 *.ab file and new system demand driven *.c file
echo "[$BASE_NAME]: reading '$1' file"
export ACC_OUT_DIR=$out_dir \
       ACC_VERBOSE=$verbose \
       ACC_BASE_DATATYPE=$data_type \

java -jar ${BASE_DIR}/alpha.glue.v2.jar $@
statuz="$?"

system_name=`cat $1 | grep affine | cut -d' ' -f2`


shift 1
HLx_str=`echo $@ | sed 's~ ~_~g'`
assert_file_created "$out_dir/src/${system_name}.c"
assert_file_created "$out_dir/src/${system_name}-wrapper.c"
if [[ -z "$ACC_ABFT_VERSION" || "$ACC_ABFT_VERSION" == "v1" ]]; then
  assert_file_created "$out_dir/src/${system_name}_abft_v1_${HLx_str}.c"
fi
if [[ -z "$ACC_ABFT_VERSION" || "$ACC_ABFT_VERSION" == "v2" ]]; then
  assert_file_created "$out_dir/src/${system_name}_abft_v2_${HLx_str}.c"
fi
assert_file_created "$out_dir/src/time.c"
assert_file_created "$out_dir/Makefile"

if [[ -n "$MAKE" ]]; then
  make -C $out_dir
fi
