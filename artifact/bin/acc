#!/bin/bash

# acc - (A)lpha to (C) (C)ompiler
#
# This script wraps the Alpha codegen functionality and gcc. Given a simple input Alpha
# program, it produces the demand driven C code from the new (v2) AlphaZ and the supporting
# wrapper, makefile, and verification code from the old (v1) AlphaZ. Then it compiles
# everything with gcc.
# 

BASE_DIR=`dirname $0`
BASE_NAME=`basename $0`

# exit if any intermediate steps fail
#set -e

function usage {
  echo "usage:" 
  echo "  $BASE_NAME [-m] [-o out_dir] [-d] alpha_file";
  echo "  $BASE_NAME [-m] [-v1 alpha_file] [-v2 alpha_file] [-o out_dir] [-d]"
  echo "             [-s [--target-complexity] [--num-simplifications] [--try-splitting]]"
  echo "options:"
  echo "    -v1, --gen-v1-from         : Input Alpha file (*.alpha) used to generate makefile,"
  echo "                                 wrapper, and verification files"
  echo "    -v2, --gen-v2-from         : Input Alpha file (*.alpha) used to generate main system"
  echo "    -o,  --out-dir             : Directory in which to place the output files, if the"
  echo "                                 path does not exist then it will be created (default: .)"
  echo "    -m,  --make                : Run make to build the generated file. Note, this may"
  echo "                                 fail if both v1 and v2 files have not been generated."
  echo "                                 Cannot be used with -s since multiple versions may be"
  echo "                                 generated. (default: false)"
  echo "    -s,  --simplify            : Run the simplifying reductions algorithm on v2 input"
  echo "                                 (default: false)"
  echo "         --num-simplifications : Stop after a number of simplifications is found, or the"
  echo "                                 exploration terminates, whichever comes first (default: 1)"
  echo "         --target-complexity   : Target simplified complexity (default: strictly smaller"
  echo "                                 than the input program's complexity) "
  echo "         --try-splitting       : Consider splits during simplification as needed"
  echo "arguments:"
  echo "    alpha_file           :  Input Alpha file used to generate main ystem, makefile,"
  echo "                            wrapper, and verification files" 
  echo ""
  echo "The -v1 and -v2 options override the positional alpha_file arg if both are specified."
  echo "At least one input alpha file must be specified."
}

function assert_file_exists {
  file_name=$1
  if [[ ! -f $file_name ]]; then
    echo "[$BASE_NAME]: error, failed to create the file '$file_name', exiting"
    exit 1
  fi
  echo "[$BASE_NAME]: created '$file_name' file" 
}

function assert_dependency_exists {
  dep=$1
  if [[ -z "$(which $dep)" ]]; then
    echo "[$BASE_NAME]: error, the utility '$dep' is required but cannot be found in the PATH, exiting"
    exit 1
  fi
}

function assert_dependencies_exist {
  assert_dependency_exists java
  assert_dependency_exists make
  assert_dependency_exists cc
}


#######################################################################
# arg parsing and preprocessing
#######################################################################

out_dir='.'
debug=0

params=""
while (( "$#" )); do
  case "$1" in
    -h|--help)
      usage;
      exit 0;
      ;;
    -m|--make)
      MAKE=1;
      shift 1
      ;;
    -s|--simplify)
      simplify=1;
      shift 1
      ;;
    --try-splitting)
      try_splitting=1;
      shift 1
      ;;
    --num-simplifications)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        num_simplifications=$2
        shift 2
      else
        echo "argument missing for -- $1" >&2
        exit 1
      fi
      ;;
    --target-complexity)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        target_complexity=$2
        shift 2
      else
        echo "argument missing for -- $1" >&2
        exit 1
      fi
      ;;
    -v1|--gen-v1-from)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        v1_file=$2
        shift 2
      else
        echo "argument missing for -- $1" >&2
        exit 1
      fi
      ;;
    -v2|--gen-v2-from)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        v2_file=$2
        shift 2
      else
        echo "argument missing for -- $1" >&2
        exit 1
      fi
      ;;
    -o|--out-dir)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        out_dir=$2
        shift 2
      else
        echo "argument missing for -- $1" >&2
        exit 1
      fi
      ;;
    -*|--*=) # unsupported flags
      echo "unrecognized option -- $(echo $1 | sed 's~^-*~~')" >&2
      usage;
      exit 1
      ;;
    *) # preserve positional arguments
      params="$params $1"
      shift
      ;;
  esac
done

eval set -- "$params";

if [[ -z "$v1_file" && -z "$v2_file" && -z "$1" ]]; then
  echo "No input alpha_file was specified"
  usage
  exit 1
fi 

v1_gen_alpha_file=$1
if [[ -n "$v1_file" ]]; then v1_gen_alpha_file=$v1_file; fi

v2_gen_alpha_file=$1
if [[ -n "$v2_file" ]]; then v2_gen_alpha_file=$v2_file; fi

if   [[ -z "$v1_file" && -n "$v2_file" ]]; then
  choice=2
elif [[ -n "$v1_file" && -z "$v2_file" ]]; then
  choice=1
else
  choice=0
fi

# check and exit if dependencies are not available
assert_dependencies_exist

# make out directory if it doesn't already exist
mkdir -p $out_dir

#######################################################################
# codegen - system C file
#######################################################################

if [[ "$choice" == "2" || "$choice" == "0" ]]; then
  # grab the system name from the alpha_file
  system_name=`cat $v2_gen_alpha_file | grep affine | head -n1 | sed 's~.*affine \([^ ][^ ]*\) .*~\1~'`
  
  # using v2 alpha, create the v1 *.ab file and new system demand driven *.c file
  echo "[$BASE_NAME]: reading '$v2_gen_alpha_file' file"
  export ACC_ALPHA_FILE=$v2_gen_alpha_file \
         ACC_OUT_DIR=$out_dir \
         ACC_CHOICE=$choice \
         ACC_SIMPLIFY=$simplify \
         ACC_NUM_SIMPLIFICATIONS=$num_simplifications \
         ACC_TARGET_COMPLEXITY=$target_complexity \
         ACC_TRY_SPLITTING=$try_splitting
  java -jar ${BASE_DIR}/alpha.glue.v2.jar
  statuz="$?"
  if [[ -z "$simplify" ]]; then
    assert_file_exists ${out_dir}/${system_name}.c
  else
    # there should be at least one simplified file
    if [[ "$statuz" != "0" ]]; then 
      echo "[$BASE_NAME]: found no ${target_complexity}D simplifications, exiting"
      exit 1
    fi
    for f in ${out_dir}/simplifications/*/*.alpha
    do
      assert_file_exists ${out_dir}/simplifications/v0/${system_name}.c
    done
  fi
fi

#######################################################################
# codegen - wrapper & verify C files and Makefile
#######################################################################

if [[ "$choice" == "1" || "$choice" == "0" ]]; then

  # grab the system name from the alpha_file
  system_name=`cat $v1_gen_alpha_file | grep affine | head -n1 | sed 's~.*affine \([^ ][^ ]*\) .*~\1~'`

  # generate *.ab file
  echo "[$BASE_NAME]: reading '$v1_gen_alpha_file' file"
  export ACC_ALPHA_FILE=$v1_gen_alpha_file \
         ACC_OUT_DIR=$out_dir \
         ACC_CHOICE=1
  java -jar ${BASE_DIR}/alpha.glue.v2.jar
  assert_file_exists ${out_dir}/${system_name}.ab
  
  echo "[$BASE_NAME]: reading '${out_dir}/${system_name}.ab' file"
  # using v1 alpha, create the supporting wrapper, makefile, and verification *.c files
  java -jar ${BASE_DIR}/alpha.glue.v1.jar \
    ${out_dir}/${system_name}.ab \
    $out_dir
  assert_file_exists ${out_dir}/${system_name}-wrapper.c
  assert_file_exists ${out_dir}/${system_name}_verify.c
  assert_file_exists ${out_dir}/Makefile
fi

#######################################################################
# build generated C file with make
#######################################################################

if [[ -n "$MAKE" && -z "$simplify" ]]; then
  echo "[$BASE_NAME]: building with make"
  make -C $out_dir
elif [[ -n "$MAKE" && -n "$simplify" ]]; then
  echo "[$BASE_NAME]: skipping make step since -s was passed"
fi
